#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- uqs_stdlib.waf_files --
sources_platform(ALL)
add_sources("NoUberFile"
	SOURCE_GROUP "stdlib"
		"stdlib/StdAfx.cpp"
		"stdlib/StdAfx.h"
)

add_sources("UQS_uber_stdlib.cpp"
	SOURCE_GROUP "Root"
		"StdLibRegistration.h"
		"StdLibRegistration.cpp"
	SOURCE_GROUP "stdlib"
		"stdlib/DeferredEvaluators.cpp"
		"stdlib/DeferredEvaluators.h"
		"stdlib/Functions.cpp"
		"stdlib/Functions.h"
		"stdlib/Generators.cpp"
		"stdlib/Generators.h"
		"stdlib/InstantEvaluators.cpp"
		"stdlib/InstantEvaluators.h"
		"stdlib/ItemDebugProxies.cpp"
		"stdlib/ItemDebugProxies.h"
		"stdlib/ItemDebugRendering.h"
		"stdlib/ItemDebugRendering.cpp"
		"stdlib/Items.cpp"
		"stdlib/ItemMonitors.h"
		"stdlib/ItemMonitors.cpp"
)

end_sources()
#END-FILE-LIST

macro (CryUQS_StdLib_SetupOptions)
if (ORBIS OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	target_compile_options(${THIS_PROJECT} PRIVATE
		-Wno-parentheses
		-Wno-reorder
		-Wno-unused-value
		-Wno-unknown-pragmas
		-Wno-format
		-Wno-unused-private-field
		-Wno-multichar
		-Wno-empty-body
		-Wno-switch
		-Wno-unused-function
		-Wno-char-subscripts
		-Wno-c++11-narrowing
	)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	target_compile_options(${THIS_PROJECT} PRIVATE
		-Wno-unused-function
		-Wno-unused-value
		-Wno-sign-compare
		-Wno-ignored-attributes
		-Wno-int-in-bool-context
		-Wno-unused-but-set-variable
		-Wno-misleading-indentation
		-Wno-logical-not-parentheses
		-Wno-strict-aliasing
		-Wno-unknown-pragmas
		-Wno-unused-const-variable
		-Wno-multichar
		-Wno-char-subscripts
		-Wno-parentheses
		-Wno-comment
		-Wno-address
		-Wno-format
		-Wno-switch
	)
endif()

target_include_directories(${THIS_PROJECT}
	PRIVATE "stdlib"
	PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}"
	PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/../.."
)

if(OPTION_UQS_SCHEMATYC_SUPPORT)
	target_include_directories(${THIS_PROJECT}
		PRIVATE "${CRYENGINE_DIR}/Code/CryEngine/CrySchematyc/Core/Interface"
		PRIVATE "${CRYENGINE_DIR}/Code/CryEngine/CrySchematyc/STDEnv/Interface"
	)
endif()
endmacro()

if (OPTION_STATIC_LINKING AND NOT OPTION_STATIC_LINKING_WITH_GAME_AS_DLL)
CryEngineStaticModule(CryUQS_StdLib PCH "stdlib/StdAfx.cpp" SOLUTION_FOLDER "CryPlugins/CryUQS")
else()
CryEngineStaticModule(CryUQS_StdLib FORCE_SHARED PCH "stdlib/StdAfx.cpp" SOLUTION_FOLDER "CryPlugins/CryUQS")
endif()
#CryEngineStaticModule(CryUQS_StdLib PCH "stdlib/StdAfx.cpp" SOLUTION_FOLDER "CryPlugins/CryUQS")
#endif()
CryUQS_StdLib_SetupOptions()
