# Copyright 2001-2019 Crytek GmbH / Crytek Group. All rights reserved.
from waflib.TaskGen import feature
from waflib.Utils import run_once
import os

def build(bld):

	bld.CryEngineModule(
		target     = 'CryGamePlatformSteam',
		vs_filter  = 'CryPlugins',
		file_list  = 'CryGamePlatform_Steam.waf_files',

		pch        = 'StdAfx.cpp',
		
		features = ['copy_steamworks_binaries'],
				
		includes   = [ 
			'../../Interface',
			Path('Code/SDKs/SteamWorks/public')
		],

		module_provides = dict(
			includes = [
				bld.path.make_node('../../Interface').abspath()
			]			
		),
		win_x86_lib       = [ 'steam_api' ],
		win_x64_lib       = [ 'steam_api64' ],		
		win_x86_libpath   = [ Path('Code/SDKs/Steamworks/redistributable_bin/') ],
		win_x64_libpath   = [ Path('Code/SDKs/Steamworks/redistributable_bin/win64/') ],
	)
	
@feature('copy_steamworks_binaries')
@run_once
def feature_copy_steamworks_binaries(self):
	bld 			= self.bld
	platform		= bld.env['PLATFORM']
	configuration	= bld.env['CONFIGURATION']

	if platform  == 'project_generator':
		return

	if not platform in ['win_x64', 'win_x86']:
		return
		
	output_folder = bld.get_output_folders(platform, configuration)[0]
	
	if platform == 'win_x64':
		filename =  'steam_api64.dll'
		libpath = bld.CreateRootRelativePath('Code/SDKs/Steamworks/redistributable_bin/win64/')
	elif platform =='win_x86':
		filename =  'steam_api.dll'	
		libpath = bld.CreateRootRelativePath('Code/SDKs//Steamworks/redistributable_bin/')
		
	
	self.create_task('copy_outputs', self.bld.root.make_node(os.path.join(libpath, filename)), output_folder.make_node(filename))

	
