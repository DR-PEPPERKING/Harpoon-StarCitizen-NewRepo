// Copyright 2001-2019 Crytek GmbH / Crytek Group. All rights reserved.

#pragma once

#include "IGamePlatform.h"
#include "IPlatformService.h"
#include "User.h"

namespace Cry
{
	namespace GamePlatform
	{
		//! Game platform core plugin. Keeps track and coordinates all available services.
		class CPlugin final : public IPlugin, public IService::IListener, public ISystemEventListener
		{
			CRYINTERFACE_BEGIN()
				CRYINTERFACE_ADD(Cry::GamePlatform::IPlugin)
				CRYINTERFACE_ADD(Cry::IEnginePlugin)
			CRYINTERFACE_END()

			CRYGENERATE_SINGLETONCLASS_GUID(CPlugin, "Plugin_CryGamePlatform", "{D1579580-15AB-458C-81AB-05068B275483}"_cry_guid)

		public:
			CPlugin();
			virtual ~CPlugin();

			// Cry::IEnginePlugin
			virtual bool Initialize(SSystemGlobalEnvironment& env, const SSystemInitParams& initParams) override;
			virtual void MainUpdate(float frameTime) override;
			virtual const char* GetName() const override { return "CryGamePlatform"; }
			virtual const char* GetCategory() const override { return "GamePlatform"; }
			// ~Cry::IEnginePlugin

			// IPlugin

			// User will be created on first call
			virtual IUser* GetLocalClient() const override;
			// User will NOT be created, as we expect valid UserIdentifier to be generated by IUser
			virtual IUser* GetUserById(const UserIdentifier& id) const override;
			// User will be created if account could be retrieved from service
			virtual IUser* GetUserById(const AccountIdentifier& accountId) const override;

			virtual const DynArray<IUser*>& GetFriends() const override;
#if CRY_GAMEPLATFORM_EXPERIMENTAL
			virtual const DynArray<IUser*>& GetBlockedUsers() const override;
			virtual const DynArray<IUser*>& GetMutedUsers() const override;
#endif // CRY_GAMEPLATFORM_EXPERIMENTAL

			virtual IServer* CreateServer(bool bLocal) override;
			virtual IServer* GetLocalServer() const override;

			virtual ILeaderboards* GetLeaderboards() const override;
			virtual IStatistics* GetStatistics() const override;
			virtual IRemoteStorage* GetRemoteStorage() const override;

			virtual IMatchmaking* GetMatchmaking() const override;

			virtual INetworking* GetNetworking() const override;

			virtual bool GetAuthToken(string &tokenOut, int &issuerId) override;

			virtual EConnectionStatus GetConnectionStatus() const override;
			virtual void CanAccessMultiplayerServices(std::function<void(bool authorized)> asynchronousCallback) override { asynchronousCallback(true); }

			virtual IService* GetMainService() const override;
			virtual IService* GetService(const ServiceIdentifier& svcId) const override;
			// ~IPlugin

			// IService::IListener
			virtual void OnOverlayActivated(const ServiceIdentifier& serviceId, bool active) override {}
			virtual void OnAvatarImageLoaded(const AccountIdentifier& accountId) override {}
			virtual void OnShutdown(const ServiceIdentifier& serviceId) override;
			virtual void OnAccountAdded(IAccount& account) override;
			virtual void OnAccountRemoved(IAccount& account) override;
			virtual void OnPersonaStateChanged(const IAccount& account, CEnumFlags<EPersonaChangeFlags> changeFlags) override {}
			virtual void OnGetSteamAuthTicketResponse(bool success, uint32 authTicket) override {}
			virtual void OnAuthTokenReceived(bool success, const char* szToken) override {}
			virtual void OnNetworkStatusChanged(const EConnectionStatus& connectionStatus) override {}
			// ~IService::IListener

			// ISystemEventListener
			virtual void OnSystemEvent(ESystemEvent event, UINT_PTR wparam, UINT_PTR lparam) override;
			// ~ISystemEventListener

			virtual void RegisterMainService(IService& service) override;
			virtual void RegisterService(IService& service) override;

		private:
			ServiceIdentifier GetMainServiceIdentifier() const;
			void UnregisterService(const ServiceIdentifier& service);

			IUser* TryGetUser(const UserIdentifier& id) const;
			IUser* TryGetUser(const AccountIdentifier& id) const;
			IUser* TryGetUser(IAccount& account) const;
			IUser* AddUser(IAccount& account) const;

			void AddOrUpdateUser(DynArray<IAccount*> userAccounts);

			IAccount* GetAccount(const AccountIdentifier& id) const;
			IAccount* GetMainLocalAccount() const;

			void CollectConnectedAccounts(DynArray<IAccount*>& userAccounts) const;
			void AddAccountConnections(const IAccount& account, DynArray<IAccount*>& userAccounts) const;
			DynArray<IAccount*>::iterator FindMainAccount(DynArray<IAccount*>& userAccounts) const;

			// If there's no main service, userAccounts will not be touched
			void EnsureMainAccountFirst(DynArray<IAccount*>& userAccounts) const;

		private:
			// Index '0' is reserved for main service
			DynArray<IService*> m_services;
			// Index '0' is reserved for local user
			mutable std::vector<std::unique_ptr<CUser>> m_users;
			mutable DynArray<IUser*> m_friends;
#if CRY_GAMEPLATFORM_EXPERIMENTAL
			mutable DynArray<IUser*> m_blockedUsers;
			mutable DynArray<IUser*> m_mutedUsers;
#endif // CRY_GAMEPLATFORM_EXPERIMENTAL
		};
	}
}