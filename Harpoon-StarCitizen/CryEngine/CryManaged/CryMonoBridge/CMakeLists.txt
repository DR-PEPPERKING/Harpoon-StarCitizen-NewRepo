#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- crymonobridge.waf_files --
sources_platform(ALL)
add_sources("CryMonoBridge_main_uber_1.cpp"
	SOURCE_GROUP "Root"
		"MonoRuntime.h"
		"MonoRuntime.cpp"
		"ManagedPlugin.h"
		"ManagedPlugin.cpp"
		"resource.h"
		"StdAfx.h"
)

add_sources("CryMonoBridge_main_uber_2.cpp"
	SOURCE_GROUP "Wrappers"
		"Wrappers/MonoDomain.h"
		"Wrappers/MonoDomain.cpp"
		"Wrappers/RootMonoDomain.h"
		"Wrappers/RootMonoDomain.cpp"
		"Wrappers/AppDomain.h"
		"Wrappers/AppDomain.cpp"
		"Wrappers/MonoLibrary.h"
		"Wrappers/MonoLibrary.cpp"
		"Wrappers/CompiledMonoLibrary.h"
		"Wrappers/CompiledMonoLibrary.cpp"
		"Wrappers/MonoClass.h"
		"Wrappers/MonoClass.cpp"
		"Wrappers/MonoObject.h"
		"Wrappers/MonoObject.cpp"
		"Wrappers/MonoException.h"
		"Wrappers/MonoException.cpp"
		"Wrappers/MonoMethod.h"
		"Wrappers/MonoMethod.cpp"
		"Wrappers/MonoString.h"
		"Wrappers/MonoString.cpp"
		"Wrappers/MonoProperty.h"
		"Wrappers/MonoProperty.cpp"
)

add_sources("CryMonoBridge_main_uber_3.cpp"
	SOURCE_GROUP "NativeComponents"
		"NativeComponents/EntityComponentFactory.h"
		"NativeComponents/EntityComponentFactory.cpp"
		"NativeComponents/ManagedEntityComponent.h"
		"NativeComponents/ManagedEntityComponent.cpp"
)

add_sources("CryMonoBridge_main_uber_4.cpp"
	SOURCE_GROUP "NativeToManagedInterfaces"
		"NativeToManagedInterfaces/IMonoNativeToManagedInterface.h"
		"NativeToManagedInterfaces/Entity.h"
		"NativeToManagedInterfaces/Entity.cpp"
		"NativeToManagedInterfaces/Console.h"
		"NativeToManagedInterfaces/Console.cpp"
		"NativeToManagedInterfaces/Audio.h"
		"NativeToManagedInterfaces/Audio.cpp"
)

if (OPTION_CRYMONO_SWIG)
	add_sources("CryMonoBridge_SWIG.cpp"
		SOURCE_GROUP "SWIG"
			"SWIG/CryEngine.swig"
			"SWIG/CryAction.i"
			"SWIG/Cry3DEngine.i"
			"SWIG/CryAISystem.i"
			"SWIG/CryAnimation.i"
			"SWIG/CryAudio.i"
			"SWIG/CryCommon.i"
			"SWIG/CryDynamicResponseSystem.i"
			"SWIG/CryEntitySystem.i"
			"SWIG/CryFont.i"
			"SWIG/CryInput.i"
			"SWIG/CryMonoBridge.i"
			"SWIG/CryLiveCreate.i"
			"SWIG/CryLobby.i"
			"SWIG/CryMovie.i"
			"SWIG/CryNetwork.i"
			"SWIG/CryPhysics.i"
			"SWIG/CryRender.i"
			"SWIG/CryScriptSystem.i"
			"SWIG/CrySystem.i"
			"SWIG/ForwardDeclarations.i"
	)
endif()

add_sources("NoUberFile"
	SOURCE_GROUP "Root"
		"StdAfx.cpp"
)

end_sources()
#END-FILE-LIST

CryEngineModule(CryMonoBridge FORCE_SHARED_WIN PCH "StdAfx.cpp" SOLUTION_FOLDER "CryMono")
target_compile_options(${THIS_PROJECT} PRIVATE /EHsc /bigobj)
target_include_directories(${THIS_PROJECT} PRIVATE "${CRYENGINE_DIR}/Code/CryEngine/CryAction" )

# c# assembly generation should be uniform across all projects for 32 bit and 64 bit.
# Currently there are 4 other assemblies being generated
# 1. CryEngine.Common
# 2. CryEngine.Core
# 3. CryEngine.Core.UI
# 4. CryEngine.Core.Tests

if (OPTION_CRYMONO_SWIG)
	# Create the common mono assembly generation environment variables
	create_mono_compiler_settings()

	# Build SWIG
	set(CMAKE_MODULE_LINKER_FLAGS_PROFILE ${CMAKE_SHARED_LINKER_FLAGS_PROFILE})
	set(swig_inputs)
	set(swig_globals)
	foreach(sourcefile ${SOURCES})
		if ("${sourcefile}" MATCHES ".*\\.\\i$")
			set(swig_inputs ${swig_inputs} "${sourcefile}")
		endif()
		if ("${sourcefile}" MATCHES ".*\\.\\swig$")
			set(swig_globals ${swig_globals} "${sourcefile}")
		endif()
	endforeach()

	set(SWIG_EXECUTABLE "${SDK_DIR}/swig/swig")

	if (NOT PRODUCT_NAME)
		set(PRODUCT_NAME ${THIS_PROJECT})
	endif()
	file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${MONO_SWIG_OUTPUT_ASSEMBLY_NAME}_meta.cs"
		"using System.Reflection;\n"
		"using System.Runtime.CompilerServices;\n"
		"[assembly: InternalsVisibleTo(\"CryEngine.Core\")]\n"
		"[assembly: AssemblyProduct(\"${PRODUCT_NAME}\")]\n"
		"[assembly: AssemblyTitle(\"${PRODUCT_NAME}\")]\n"
		"[assembly: AssemblyDescription(\"${PRODUCT_NAME}\")]\n"
		"[assembly: AssemblyVersion(\"${METADATA_VERSION}\")]\n"
		"[assembly: AssemblyCompany(\"${METADATA_COMPANY}\")]\n"
		"[assembly: AssemblyCopyright(\"${METADATA_COPYRIGHT}\")]\n"
		)

	set(mono_inputs "${CMAKE_CURRENT_BINARY_DIR}/${MONO_SWIG_OUTPUT_ASSEMBLY_NAME}_meta.cs")

	foreach(f ${swig_inputs})
		string(LENGTH "${f}" flen)
		math(EXPR flen ${flen}-2)
		string(SUBSTRING "${f}" 0 ${flen} basename)
		file(RELATIVE_PATH bindir "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_BINARY_DIR}")
		set(basename "${basename}")
		set(f_cpp "${basename}.cpp")
		set(f_cs "${basename}.cs")
		set(f_h "${basename}.h")
		if(WINDOWS)
			set(defs -D_WIN32 -D_WIN64)
		else()
			message(ERROR "Mono not supported on this platform")
		endif()

		get_target_property(target_defs ${THIS_PROJECT} COMPILE_DEFINITIONS)
		foreach(d ${target_defs})
			set(defs ${defs} -D${d})
		endforeach()
		set(defs ${defs} -D_MT -D_DLL -D_USRDLL)

		get_filename_component(f_cs_dir "${f_cs}" DIRECTORY)
		get_filename_component(f_cs_name "${f_cs}" NAME)

		# Detect dependencies
		execute_process(
			COMMAND "${SWIG_EXECUTABLE}" -MM ${defs} -csharp "${f}"
			OUTPUT_VARIABLE swig_deps
			WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
		)
		string(REGEX MATCHALL "\n  [^ ][^ ][^ :]+" temp ${swig_deps})
		set(swig_deps)
		foreach(t ${temp})
			string(STRIP "${t}" t)
			set(swig_deps ${swig_deps} "${t}")
		endforeach()

		set(defs ${defs} -D_$<UPPER_CASE:$<CONFIG>> -D$<UPPER_CASE:$<CONFIG>>)

		set(mono_inputs ${mono_inputs} "${f_cs}")
		add_custom_command(
			OUTPUT "${f_cpp}" "${f_h}" "${f_cs}"
			COMMAND "${SWIG_EXECUTABLE}" -c++ ${defs} -DSWIG_CSHARP_NO_IMCLASS_STATIC_CONSTRUCTOR ${secondary_defs} -csharp -o "${bindir}/${f_cpp}" -outdir "${bindir}/${f_cs_dir}" -outfile "${f_cs_name}" -namespace ${MONO_SWIG_OUTPUT_ASSEMBLY_NAME} -pch-file "\\\"StdAfx.h\\\"" -fno-include-guards -dllimport ${THIS_PROJECT} "${f}"
			MAIN_DEPENDENCY "${f}"
			WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
			DEPENDS ${swig_deps}
		)
		set_property(DIRECTORY "${CRYENGINE_DIR}" APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${swig_deps} "${CMAKE_CURRENT_SOURCE_DIR}/${f}")
		set(secondary_defs -DSWIG_CXX_EXCLUDE_SWIG_INTERFACE_FUNCTIONS -DSWIG_CSHARP_EXCLUDE_STRING_HELPER -DSWIG_CSHARP_EXCLUDE_EXCEPTION_HELPER)
		target_sources(${THIS_PROJECT} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/${f_cpp}" "${CMAKE_CURRENT_BINARY_DIR}/${f_h}")
		EXCLUDE_FILE_FROM_MSVC_PRECOMPILED_HEADER("${CMAKE_CURRENT_BINARY_DIR}/${f_cpp}")
		source_group("Generated" FILES "${CMAKE_CURRENT_BINARY_DIR}/${f_cpp}" "${CMAKE_CURRENT_BINARY_DIR}/${f_h}")
		set_source_files_properties("${CMAKE_CURRENT_BINARY_DIR}/${f_h}" PROPERTIES HEADER_FILE_ONLY true GENERATED true)
	endforeach()

	add_custom_command(
		TARGET ${THIS_PROJECT} PRE_LINK
		COMMAND "${CSC_PATH}" /target:library /langversion:${MONO_LANGUAGE_VERSION} /platform:${MONO_CPU_PLATFORM} /optimize /debug:portable ${mono_inputs} /out:"${OUTPUT_DIRECTORY}/${MONO_SWIG_OUTPUT_ASSEMBLY_NAME}.dll"
		DEPENDS ${mono_inputs}
		WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
	)
endif()

if(WINDOWS)
	target_include_directories(${THIS_PROJECT} PRIVATE "${SDK_DIR}/Mono/include/mono-2.0")
	set_libpath_flag()
	set_property(TARGET ${THIS_PROJECT} APPEND_STRING PROPERTY LINK_FLAGS " ${LIBPATH_FLAG}\"${SDK_DIR}/Mono/lib/x64\"")
	target_link_libraries(${THIS_PROJECT} PRIVATE Shell32 libmono-static-sgen Mswsock Psapi Winmm version Shlwapi)
endif()
