#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- cryaudioimpl.waf_files --
sources_platform(ALL)
add_sources("CryAudioImpl_uber_0.cpp"
	SOURCE_GROUP "Header Files"
		"AuxBus.h"
		"AuxThread.h"
		"Common.h"
		"CVars.h"
		"Event.h"
		"EventInstance.h"
		"FileIOHandler.h"
		"GlobalData.h"
		"Impl.h"
		"Listener.h"
		"ListenerInfo.h"
		"Object.h"
		"Parameter.h"
		"ParameterEnvironment.h"
		"ParameterEnvironmentAdvanced.h"
		"ParameterAdvanced.h"
		"ParameterState.h"
		"resource.h"
		"SoundBank.h"
		"State.h"
		"Switch.h"
	SOURCE_GROUP "Source Files"
		"AuxBus.cpp"
		"AuxThread.cpp"
		"Common.cpp"
		"CryAudioImpl.cpp"
		"CVars.cpp"
		"Event.cpp"
		"EventInstance.cpp"
		"FileIOHandler.cpp"
		"Impl.cpp"
		"Listener.cpp"
		"Object.cpp"
		"Parameter.cpp"
		"ParameterEnvironment.cpp"
		"ParameterEnvironmentAdvanced.cpp"
		"ParameterAdvanced.cpp"
		"ParameterState.cpp"
		"State.cpp"
		"Switch.cpp"
)

add_sources("NoUberFile"
	SOURCE_GROUP "Root"
		"stdafx.cpp"
		"stdafx.h"
)

end_sources()
#END-FILE-LIST

if (AUDIO_WWISE)
	CryEngineModule(CryAudioImplWwise FORCE_SHARED_WIN PCH "stdafx.cpp" SOLUTION_FOLDER "CryEngine/Audio/Implementations")
	target_include_directories(${THIS_PROJECT} PRIVATE ../../Common "${SDK_DIR}/Audio/oculus/wwise/Include" "${SDK_DIR}/Audio/wwise/SDK/include" )
	
	if(AUDIO_OCULUS_HRTF)
		target_compile_definitions(${THIS_PROJECT} PRIVATE -DWWISE_USE_OCULUS)
	endif()

	if(WINDOWS)
		set( WWISE_PLATFORM_PATH x64 )
		set( WWISE_PLATFORM_PREFIX WIN )
	elseif(LINUX)
		target_link_libraries(${THIS_PROJECT} PRIVATE SDL2)
		set( WWISE_PLATFORM_PATH Linux_x64 )
		set( WWISE_PLATFORM_PREFIX LINUX )
	elseif(DURANGO)
		set( WWISE_PLATFORM_PATH XboxOne )
		set( WWISE_PLATFORM_PREFIX DURANGO )
	elseif(ORBIS)
		set( WWISE_PLATFORM_PATH PS4 )
		set( WWISE_PLATFORM_PREFIX ORBIS )
	elseif(APPLE)
		set( WWISE_PLATFORM_PATH Mac )
		set( WWISE_PLATFORM_PREFIX DARWIN )
	elseif(ANDROID)
		set( WWISE_PLATFORM_PATH Android_arm64-v8a )
		set( WWISE_PLATFORM_PREFIX ANDROID )
		target_link_libraries(${THIS_PROJECT} PRIVATE OpenSLES)
	endif()

	if ((WINDOWS OR DURANGO) AND MSVC)
		if (MSVC_VERSION EQUAL 1700)
			# Visual Studio 2012
			set(MSVC_LIB_PREFIX_WWISE "vc110")
		elseif (MSVC_VERSION EQUAL 1800)
			# Visual Studio 2013
			set(MSVC_LIB_PREFIX_WWISE "vc120")
		elseif (MSVC_VERSION EQUAL 1900)
			# Visual Studio 2015
			set(MSVC_LIB_PREFIX_WWISE "vc140")
		elseif ((MSVC_VERSION GREATER 1900) AND (MSVC_VERSION LESS_EQUAL 1919))
			# Visual Studio 2017
			set(MSVC_LIB_PREFIX_WWISE "vc150")
		elseif (MSVC_VERSION GREATER 1919)
			# Visual Studio 20??
			set(MSVC_LIB_PREFIX_WWISE "vc150")
		endif()
		set(WWISE_LIB_PATH "${SDK_DIR}/Audio/wwise/SDK/${WWISE_PLATFORM_PATH}_${MSVC_LIB_PREFIX_WWISE}/$<CONFIG>/lib/")
	else()
		set(WWISE_LIB_PATH "${SDK_DIR}/Audio/wwise/SDK/${WWISE_PLATFORM_PATH}/$<CONFIG>/lib/")
	endif()

	set( COMM_CENTRAL_LIBS CommunicationCentral )
	set( WWISE_CORE_LIBS
		AkMemoryMgr
		AkMusicEngine
		AkSoundEngine
		AkStreamMgr
		)

	set( WWISE_PLUGIN_LIBS
		AkMeterFX
		AkOpusDecoder
		AkVorbisDecoder
		)

	set( COMMON_WWISE_LIBS ${WWISE_CORE_LIBS} ${WWISE_PLUGIN_LIBS} )

	make_library(COMMON_WWISE_LIBS "${WWISE_LIB_PATH}")
	make_library(COMM_CENTRAL_LIBS "${WWISE_LIB_PATH}")

	# TODO: ws2_32 is not needed in release builds (Wwise profiling)
	set( WIN_LIBS Ole32 Msacm32 dinput8 Winmm dsound dxguid ws2_32 xinput )
	set( WIN_WWISE_LIBS AkMotionGeneratorSource AkMotionSink ASIOSourceSink )
	make_library(WIN_WWISE_LIBS "${WWISE_LIB_PATH}")
	set( WIN_RELEASE_LIBS ${COMMON_WWISE_LIBS} ${WIN_WWISE_LIBS} ${WIN_LIBS} )
	set( WIN_NONRELEASE_LIBS ${COMM_CENTRAL_LIBS} ${WIN_RELEASE_LIBS} "${WWISE_LIB_PATH}SFLib.lib" )

	set( DURANGO_LIBS MMDevApi Ws2_32 combase kernelx SmartGlassInterop d3dcompiler dxguid xg_x uuid xaudio2 acphal )
	set( DURANGO_WWISE_LIBS AkMotionGeneratorSource AkMotionSink )
	make_library(DURANGO_WWISE_LIBS "${WWISE_LIB_PATH}")
	set( DURANGO_RELEASE_LIBS ${COMMON_WWISE_LIBS} ${DURANGO_WWISE_LIBS} ${DURANGO_LIBS} )
	set( DURANGO_NONRELEASE_LIBS ${COMM_CENTRAL_LIBS} ${DURANGO_RELEASE_LIBS} )

	set( ORBIS_LIBS SceAudioOut_stub_weak SceAjm_stub_weak SceAudio3d_stub_weak SceMove_Stub_weak)
	set( ORBIS_WWISE_LIBS SceAudio3dEngine AkMotionGeneratorSource AkMotionSink )
	make_library(ORBIS_WWISE_LIBS "${WWISE_LIB_PATH}")
	set( ORBIS_RELEASE_LIBS ${COMMON_WWISE_LIBS} ${ORBIS_WWISE_LIBS} ${ORBIS_LIBS} )
	set( ORBIS_NONRELEASE_LIBS ${COMM_CENTRAL_LIBS} ${ORBIS_RELEASE_LIBS} )
	
	set( LINUX_LIBS pthread)
	set( LINUX_WWISE_LIBS )
	make_library(LINUX_WWISE_LIBS "${WWISE_LIB_PATH}")
	set( LINUX_RELEASE_LIBS ${COMMON_WWISE_LIBS} ${LINUX_WWISE_LIBS} ${LINUX_LIBS} )
	set( LINUX_NONRELEASE_LIBS ${COMM_CENTRAL_LIBS} ${LINUX_RELEASE_LIBS} )
	
	set( DARWIN_WWISE_LIBS AkAACDecoder )
	make_library(DARWIN_WWISE_LIBS "${WWISE_LIB_PATH}")
	set( DARWIN_RELEASE_LIBS ${COMMON_WWISE_LIBS} ${DARWIN_WWISE_LIBS} )
	set( DARWIN_NONRELEASE_LIBS ${COMM_CENTRAL_LIBS} ${DARWIN_RELEASE_LIBS} )

	set( ANDROID_WWISE_LIBS	CrankcaseAudioREVModelPlayerFX AuroHeadphoneFX AkMotionGeneratorSource AkMotionSink)
	make_library(ANDROID_WWISE_LIBS "${WWISE_LIB_PATH}")

	set( ANDROID_RELEASE_LIBS ${COMMON_WWISE_LIBS} ${ANDROID_WWISE_LIBS} )
	set( ANDROID_NONRELEASE_LIBS ${COMM_CENTRAL_LIBS} ${ANDROID_RELEASE_LIBS} )
	
	foreach(wwise_lib ${${WWISE_PLATFORM_PREFIX}_RELEASE_LIBS})
		target_link_libraries( ${THIS_PROJECT} PRIVATE optimized ${wwise_lib} )
	endforeach()
	foreach(wwise_lib ${${WWISE_PLATFORM_PREFIX}_NONRELEASE_LIBS})
		target_link_libraries( ${THIS_PROJECT} PRIVATE debug ${wwise_lib} )
	endforeach()

	target_compile_definitions(${THIS_PROJECT} PRIVATE $<$<NOT:$<CONFIG:Release>>:CRY_AUDIO_IMPL_WWISE_USE_DEBUG_CODE>)

	if (DURANGO)
		target_compile_definitions(${THIS_PROJECT} PRIVATE -DCRY_AUDIO_IMPL_WWISE_PROVIDE_SECONDARY_POOL)
	endif()
else()
	CryFileContainer(CryAudioImplWwise SOLUTION_FOLDER "CryEngine/Audio/Implementations")
endif()
if (ORBIS OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	target_compile_options(${THIS_PROJECT} PRIVATE
		-Wno-format
		-Wno-multichar
		-Wno-parentheses
		-Wno-unknown-pragmas
		-Wno-unused-function
		-Wno-unused-private-field
	)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	target_compile_options(${THIS_PROJECT} PRIVATE
		-Wno-format
		-Wno-maybe-uninitialized
		-Wno-misleading-indentation
		-Wno-multichar
		-Wno-parentheses
		-Wno-sign-compare
		-Wno-strict-aliasing
		-Wno-unknown-pragmas
		-Wno-unused-but-set-variable
		-Wno-unused-function
		-Wno-stringop-overflow
	)
endif()
