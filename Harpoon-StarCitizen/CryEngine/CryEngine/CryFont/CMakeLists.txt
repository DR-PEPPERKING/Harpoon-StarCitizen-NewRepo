#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- cryfont.waf_files --
sources_platform(ALL)
add_sources("CryFont_Uber_0.cpp"
	SOURCE_GROUP "Header Files"
		"CryFont.h"
		"FFont.h"
		"FontRenderer.h"
		"FontTexture.h"
		"GlyphBitmap.h"
		"GlyphCache.h"
		"NullFont.h"
		"resource.h"
		"FBitmap.h"
	SOURCE_GROUP "Source Files"
		"CryFont.cpp"
		"FFont.cpp"
		"FFontXML.cpp"
		"FontRenderer.cpp"
		"FontTexture.cpp"
		"GlyphBitmap.cpp"
		"GlyphCache.cpp"
		"ICryFont.cpp"
		"NullFont.cpp"
)

add_sources("NoUberFile"
	SOURCE_GROUP "Root"
		"StdAfx.cpp"
		"StdAfx.h"
)

end_sources()
#END-FILE-LIST

CryEngineModule(CryFont PCH "StdAfx.cpp" SOLUTION_FOLDER "CryEngine")

if(DURANGO)
	# Workaround for C++/CX having "generic" as a keyword
	target_compile_definitions(${THIS_PROJECT} PRIVATE "-Dgeneric=__identifier(generic)")
endif()

target_link_libraries( ${THIS_PROJECT} PRIVATE freetype )
if (WINDOWS)
	target_link_libraries( ${THIS_PROJECT} PRIVATE Shell32 )
elseif(APPLE)
	find_library(CORE_SERVICES CoreServices)
	find_library(CARBON Carbon)
	find_library(APPLICATION_SERVICES ApplicationServices)
	target_link_libraries(${THIS_PROJECT} PRIVATE "${CORE_SERVICES}" "${CARBON}" "${APPLICATION_SERVICES}")
endif()

if (ORBIS OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	target_compile_options(${THIS_PROJECT} PRIVATE
		-Wno-reorder
		-Wno-unknown-pragmas
		-Wno-parentheses
		-Wno-format
		-Wno-switch
		-Wno-unused-function
		-Wno-unused-private-field
		-Wno-empty-body
		-Wno-unused-value
	)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	target_compile_options(${THIS_PROJECT} PRIVATE
		-Wno-unused-function
		-Wno-unused-value
		-Wno-sign-compare
		-Wno-ignored-attributes
		-Wno-int-in-bool-context
		-Wno-unused-but-set-variable
		-Wno-misleading-indentation
		-Wno-unknown-pragmas
		-Wno-unused-const-variable
		-Wno-strict-aliasing
		-Wno-maybe-uninitialized
		-Wno-multichar
		-Wno-char-subscripts
		-Wno-parentheses
		-Wno-comment
		-Wno-address
		-Wno-format
		-Wno-switch
	)
endif()

